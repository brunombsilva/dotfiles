#!/usr/bin/env bash

if [ -f '/usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh' ]; then
    powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    source '/usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh'
    # Hammer time! shell input will start in the line after powerline
    PROMPT_COMMAND="$PROMPT_COMMAND; PS1=\"\$PS1\n \";"
    return
fi

# More documentation in
# http://www.thegeekstuff.com/2008/09/bash-shell-take-control-of-ps1-ps2-ps3-ps4-and-prompt_command/

# Get current directory replacing long paths by /<letter>/<second-level>/…/<current-folder>
working_directory() {
    dir=`pwd`
    in_home=0
    if echo `pwd` | grep -E "^$HOME($|\/)" > /dev/null
    then
        dir="~${dir#$HOME}"
        in_home=1
    fi

    if [[ `tput cols &> /dev/null` -lt 100 ]]; then  # <-- Checking the term width
        first="/`echo $dir | cut -d / -f 2`"
        letter=${first:0:2}
        if [[ $in_home == 1 ]]; then
            letter="~$letter"
        fi
        proj=`echo $dir | cut -d / -f 3`
        beginning="$letter/$proj"

        end=`echo "$dir" | rev | cut -d / -f1 | rev`

        if [[ $proj == "" ]]; then
            echo $dir
        elif [[ $proj == "~" ]]; then
            echo $dir
        elif echo $dir | grep -E "$first/$proj"$ > /dev/null
        then
            echo $beginning
        elif echo $dir | grep -E "$first/$proj/$end$" > /dev/null
        then
            echo "$beginning/$end"
        else
            echo "$beginning/…/$end"
        fi
    else
        echo $dir
    fi
}

# current folder git branch, with some git-flow abbreviations
parse_git_branch() {
   branch=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/"`

    if [[ `tput cols &> /dev/null` -lt 100 ]]; then  # <---- Again checking the term width
        branch=`echo $branch | sed s/feature/f/1`
        branch=`echo $branch | sed s/hotfix/h/1`
        branch=`echo $branch | sed s/release/\r/1`
        branch=`echo $branch | sed s/master/mstr/1`
        branch=`echo $branch | sed s/develop/dev/1`
    fi

    if [[ $branch != "" ]]; then
        echo "($branch) "
    fi
}

# get a different color if there are uncommited changes in current folder
git_status_color() {
   [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && \
   echo -e "\033[0;33m" || \
   echo -e "\033[1;30m"
}

# PS1 – Default interaction prompt
PS1="\n\[\033[1;30m\]\u@\h \[\033[0;32m\]\$(working_directory) \$(git_status_color)\$(parse_git_branch)\[\033[1;31m\]\nλ \[\033[0m\]"

#PS2 – Continuation interactive prompt
PS2=" \[\033[1;31m\]→ \[\033[0m\]"

#Bash shell executes the content of the PROMPT_COMMAND just before displaying the PS1 variable.
#PROMPT_COMMAND="echo -n [$(mem-used)]"

