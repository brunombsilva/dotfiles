
" vim-pathogen (https://github.com/tpope/vim-pathogen) setup
if !exists('$PATHOGEN_PATH')
    let $PATHOGEN_PATH = '$HOME/.vim/bundle'
endif

let g:pathogen_disabled = ['DBGp-client']

if has('win32') || has('win64')
    "TODO: Remove?
    set runtimepath=$VIMRUNTIME\\..\\..\\..\\..\\..\\Config\\vim\\_vim,$VIMRUNTIME\\..\\..\\..\\..\\..\\Config\\vim\\_vim\\plugin,$VIMRUNTIME
else
    set term=screen-256color
endif

runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect($PATHOGEN_PATH.'/{}') 

set nocompatible                  " Must come first because it changes other options.

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.

" Keep swap files in one location
if has("win32") || has("win64")
    set directory=$TMP
else    
    set directory=/tmp
end
"set noswapfile

set tabstop=4                    " Global tab width.
set shiftwidth=4                 " And again, related.
set expandtab                    " Use spaces instead of tabs
set softtabstop=4

set laststatus=2                  " Show the status line all the time

syntax enable

" Solarized theme configuration

let g:solarized_termcolors=256

if has('win32') || has('win64')
    let g:solarized_degrade=1
endif

set t_Co=16
set background=dark
colorscheme solarized 


" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

"Rename tabs to show tab# and # of viewports
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ''
            let wn = tabpagewinnr(i,'$')

            let s .= (i== t ? '%#TabNumSel#' : '%#TabNum#')
            let s .= ' '.i

            let s .= ' %*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= file
            let s .= (i == t ? '%m' : '')
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        return s
    endfunction
    set tabline=%!MyTabLine()
endif

" Tabs style tweaks
hi TabLineSel term=underline cterm=underline ctermfg=239 ctermbg=187 gui=bold
hi TabNumSel term=underline cterm=underline ctermfg=239 ctermbg=187 gui=bold

" Automatic fold settings for specific files.
autocmd FileType php setlocal foldmethod=syntax
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2
autocmd FileType xml setlocal foldmethod=syntax

" Fold/unfold PHP classes, methods, functions, etc
let g:php_folding=1

" smarty files syntax highlighting
au BufRead,BufNewFile *.tpl set filetype=smarty

"xmledit plugin configuration
let loaded_xmledit = 1

" Don't use vi compatibility mode
set nocp

if version >= 600
    filetype plugin indent on
endif

set mouse=n   
let g:spchkmouse   = 1
let g:spchkautonext= 1
let g:spchkdialect = "usa" 

"let g:acp_behaviorSnipmateLength = 4
let g:acp_behaviorKeywordLength = 5
"let g:acp_behaviourHtmlOmniLength = 4

set autoindent                              "Retain indentation on next line
set smartindent                             "Turn on autoindenting of blocks
set cinwords = ""                           "But not for C-like keywords
inoremap # X<C-H>#|                         "And no magic outdent for comments
nnoremap <silent> >> :call ShiftLine()<CR>| "And no shift magic on comments

function! ShiftLine()
    set nosmartindent
    normal! >>
    set smartindent
endfunction

set backspace=indent,eol,start      "BS past autoindents, line boundaries,
set matchpairs+=<:>             "Match angle brackets too

"Switch off highlighting till next search and clear messages...
nmap <silent> <BS> :nohlsearch <BAR> set nocursorcolumn<CR>

" Use space to jump down a page (like browsers do)...
noremap <Space> <PageDown>

"=====[ Correct common mistypings in-the-fly ]=======================

iab    retrun  return
iab     pritn  print
iab       teh  the
iab      liek  like
iab  liekwise  likewise
iab      Pelr  Perl
iab      pelr  perl
iab        ;t  't
iab      moer  more
iab  previosu  previous

"shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

"Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:<.,eol:ยฌ

"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

let g:bufExplorerShowTabBuffer=1 

"DBGp-client configuration
hi DbgCurrent term=reverse ctermfg=White ctermbg=Red gui=reverse
hi DbgBreakPt term=reverse ctermfg=Red ctermbg=DarkGrey gui=reverse
let g:debuggerMaxDepth = 2

" Rainbow Parentheses Configuration
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"TODO: Review bellow

let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=3
"let g:syntastic_quiet_warnings=1
let g:syntastic_php_phpmd_post_args = 'design,unusedcode'
let g:syntastic_php_phpcs_args = '--standard=PSR2'

"let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['php'], 'passive_filetypes': [''] }


autocmd FileType php setlocal comments=s1:/**,mb:*,ex:*/,://,:#

fu! DoRunPyBuffer2()
pclose! " force preview window closed
setlocal ft=python

" copy the buffer into a new window, then run that buffer through python
sil %y a | below new | sil put a | sil %!python -
" indicate the output window as the current previewwindow
setlocal previewwindow ro nomodifiable nomodified

" back into the original window
winc p
endfu

command! RunPyBuffer call DoRunPyBuffer2()
map <Leader>py :RunPyBuffer<CR>

set ttymouse=xterm2
set mouse=a

set clipboard=unnamed
let g:php_cs_fixer_path = "/usr/local/bin/php-cs-fixer"
"let g:php_cs_fixer_fixers_list = "indentation,linefeed,traling_spaces,unused_use,php_closing_tags,eof_ending,extra_empty_lines,control_spaces,elseif"

if exists('vimcat') 
    hi Normal ctermbg=16
else
    hi Normal ctermbg=None
    hi LineNr ctermfg=235 ctermbg=Black
    hi SignColumn ctermbg=None
endif

let g:snipMate = {}
let g:snipMate['scope_aliases'] = {'php':'php'}

map <leader>ps :PSearch<cr>
map <leader>ps* :PSearchw<cr><cr>

if has("autocmd") && exists("+omnifunc")
    autocmd Filetype *
            \   if &omnifunc == "" |
            \       setlocal omnifunc=syntaxcomplete#Complete |
            \   endif
endif

imap <C-Space> <C-x><C-o>
imap <C-@> <C-Space>
set completeopt=longest,menu,preview

"let g:neocomplcache_enable_at_startup = 1

autocmd FileType smarty let b:match_words = '<:>,<\@<=[ou]l\>[^>]*\%(>\|$\):<\@<=li\>:<\@<=/[ou]l>,<\@<=dl\>[^>]*\%(>\|$\):<\@<=d[td]\>:<\@<=/dl>,<\@<=\([^/][^ \t>]*\)[^>]*\%(>\|$\):<\@<=/\1>'

let g:tagbar_left = 1

imap <leader>nt <Esc><leader>nt
map <leader>nt :NERDTreeToggle<cr>

imap <leader>ide <Esc><leader>ide
map <leader>ide :NERDTreeClose<cr>:TagbarClose<cr>:NERDTree<cr>:TagbarOpen<cr><C-w>t<C-w>s:buffer NERD_tree_1<cr><C-w>t<C-w>l<C-w>c<C-w>t
map <leader>tb :TagbarToggle<cr>

map <leader>gt :call TimeLapse() <cr>

let g:ctrlp_extensions = ['funky', 'git-log']
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
"let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_funky_matchtype = 'path'

        nnoremap <C-y> :CtrlPYankring<cr>
nnoremap <C-c>l :CtrlPCmdline<cr>

let g:clam_winpos = 'botright'

    "changesPlugin
au VimEnter * EC

map - <C-W>-
map + <C-W>+
map ยบ <C-W>>
map รง <c-W><

let g:session_autosave = 'no'

let g:investigate_use_command_for_php = 1
let g:investigate_command_for_php = '^i:call system(''midori "http://devdocs.io/#q=^s"'')'
"let g:investigate_command_for_php = '^i:call system(''midori -a "http://php.net/search.php?show=quickref&pattern=^s"'')'
